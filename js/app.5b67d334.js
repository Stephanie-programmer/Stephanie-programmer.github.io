(function(e){function n(n){for(var i,_,l=n[0],o=n[1],s=n[2],m=0,p=[];m<l.length;m++)_=l[m],Object.prototype.hasOwnProperty.call(t,_)&&t[_]&&p.push(t[_][0]),t[_]=0;for(i in o)Object.prototype.hasOwnProperty.call(o,i)&&(e[i]=o[i]);c&&c(n);while(p.length)p.shift()();return r.push.apply(r,s||[]),a()}function a(){for(var e,n=0;n<r.length;n++){for(var a=r[n],i=!0,l=1;l<a.length;l++){var o=a[l];0!==t[o]&&(i=!1)}i&&(r.splice(n--,1),e=_(_.s=a[0]))}return e}var i={},t={app:0},r=[];function _(n){if(i[n])return i[n].exports;var a=i[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,_),a.l=!0,a.exports}_.m=e,_.c=i,_.d=function(e,n,a){_.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:a})},_.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},_.t=function(e,n){if(1&n&&(e=_(e)),8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(_.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)_.d(a,i,function(n){return e[n]}.bind(null,i));return a},_.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return _.d(n,"a",n),n},_.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},_.p="/";var l=window["webpackJsonp"]=window["webpackJsonp"]||[],o=l.push.bind(l);l.push=n,l=l.slice();for(var s=0;s<l.length;s++)n(l[s]);var c=o;r.push([0,"chunk-vendors"]),a()})({0:function(e,n,a){e.exports=a("56d7")},"0437":function(e){e.exports=JSON.parse('[{"articleId":"1","name":"看病经历","channel":"【温哥华生活】","coverUrl":"/images/看病.jpeg"},{"articleId":"2","name":"实习/coop面试","channel":"【留学温哥华】","coverUrl":"/images/面试.jpg"},{"articleId":"3","name":"实习/coop公司对比","channel":"【留学温哥华】","coverUrl":"/images/公司.gif"},{"articleId":"4","name":"实习/coop求职","channel":"【留学温哥华】","coverUrl":"/images/求职.jpeg"},{"articleId":"5","name":"hpv疫苗接种篇","channel":"【温哥华生活】","coverUrl":"/images/疫苗.gif"},{"articleId":"6","name":"换眼镜","channel":"【温哥华生活】","coverUrl":"/images/眼镜.jpeg"},{"articleId":"7","name":"洗牙","channel":"【温哥华生活】","coverUrl":"/images/洗牙.png"}]')},"158b":function(e,n,a){"use strict";a("706c")},1616:function(e,n,a){"use strict";a.r(n),n["default"]='# 井字游戏 （三连棋）\nimport numpy as np\nimport pygame\n\n# 颜色 = (红, 绿, 蓝)\nWHITE = (242, 235, 211)\nBLACK = (75, 102, 99)\nBG_COLOR = (61, 189, 172)\n\n# 加载游戏背景图\nBG_IMG = pygame.image.load("BG_IMG.png")\n\n# 设置游戏窗口\nDIS_TO_BOUNDARY = 100 # 棋盘到游戏窗口的距离\nMATRIX_LEN = 3 # 棋盘是3乘3\nSQUARE_LEN = BG_IMG.get_width() / MATRIX_LEN # 每个棋格的长度是棋盘长度除以棋格个数\nscreen_len = BG_IMG.get_width() + 2 * DIS_TO_BOUNDARY # 游戏窗口的大小是棋盘长度+2个棋盘到游戏窗口边缘的距离\n\n# 游戏结果\nWIN_STR = "WINNER!" # 获胜\nDRAW_STR = "DRAW" # 平手\nLOOSER_STR = "LOOSER" # 失败\ngame_final_msg = "" # 最终显示的结果，是以上三种之一\n\n# 初始游戏\npygame.init()\nscreen = pygame.display.set_mode((screen_len, screen_len)) # 设置游戏界面的大小\n\n\ndef matrix_pos_to_screen_pos(row, col):\n    # 棋盘位置到游戏窗口位置\n    # 例子：左上角的棋格位置是0，0，游戏窗口位置是100，100\n    return (DIS_TO_BOUNDARY + col * SQUARE_LEN,\n            DIS_TO_BOUNDARY + row * SQUARE_LEN)\n\n\ndef draw_chess_piece():\n    for row in range(len(board_matrix)):\n        for col in range(len(board_matrix[row])):\n            screen_pos = matrix_pos_to_screen_pos(row, col)\n            screen_pos = (screen_pos[0] + SQUARE_LEN / 2, screen_pos[1] + SQUARE_LEN / 2)\n            if board_matrix[row][col] == 1: # 是黑棋\n                # pygame.draw.circle(游戏界面, 颜色, 位置, 半径)\n                pygame.draw.circle(screen, BLACK, screen_pos, SQUARE_LEN // 3)\n            if board_matrix[row][col] == -1: # 是白棋\n                pygame.draw.circle(screen, WHITE, screen_pos, SQUARE_LEN // 3)\n\n\ndef draw():\n    # 画画的顺序很重要，先运行的在最底下\n    screen.fill(BG_COLOR) # 填充背景色\n    screen_pos = (DIS_TO_BOUNDARY, DIS_TO_BOUNDARY)\n    screen.blit(BG_IMG, screen_pos) # 将棋盘的图片(BG_IMG)放在screen_pos (100,100)\n    draw_chess_piece() # 画每个棋子\n    pygame.display.update() # 更新游戏界面\n\n\ndef init_game():\n    global board_matrix, game_final_msg\n    game_final_msg = "" # 初始最终现实的信息为空\n    board_matrix = np.zeros((MATRIX_LEN, MATRIX_LEN), dtype=int) # 初始棋盘为空\n\n\ndef in_chessboard_area(click_pos):\n    is_in_width  = DIS_TO_BOUNDARY <= click_pos[0] <= screen_len - DIS_TO_BOUNDARY # 是否在合适的横向范围\n    is_in_height = DIS_TO_BOUNDARY <= click_pos[1] <= screen_len - DIS_TO_BOUNDARY # 是否在合适的纵向范围\n    return is_in_height and is_in_width\n\n\ndef to_matrix_pos(pos): # 游戏界面位置转化成棋盘位置\n    x = (pos[0] - DIS_TO_BOUNDARY) // SQUARE_LEN\n    y = (pos[1] - DIS_TO_BOUNDARY) // SQUARE_LEN\n    return int(x), int(y)\n\n\ndef make_move(pos):\n    # 若点击位置为空，则放入黑子\n    if board_matrix[pos[1]][pos[0]] == 0:\n        board_matrix[pos[1]][pos[0]] = 1\n\n\ndef is_player_turn(): # 是否玩家回合\n    result = np.count_nonzero(board_matrix == 0) % 2 == 1 # 棋盘矩阵里面如果数值为零的个数是奇数\n    return result\n\n\ndef ai_make_move():\n    # 找到第一个棋格为空的地方，放入白棋\n    for row in range(len(board_matrix)):\n        for col in range(len(board_matrix[row])):\n            if board_matrix[row][col] == 0:\n                board_matrix[row][col] = -1\n                return\n\n\ndef should_restart(): # 是否从新开始\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.MOUSEBUTTONUP:\n                # 如果点击窗口，就从新开始\n                return True\n            if event.type == pygame.QUIT:\n                # 如果点击左上角退出键，就退出游戏\n                return False\n\n\ndef display_end_game():\n    screen.fill(BG_COLOR) # 填充背景色\n    font = pygame.font.Font(None, 70) # 设置字体\n\n    global game_final_msg, running\n    winner_msg = font.render(game_final_msg, True, BLACK) # font.render(要显示的信息, 抗锯齿, 颜色)\n    screen.blit(winner_msg, (screen_len / 3, screen_len / 3)) # 在游戏界面的三分之一高度和三分之一宽度处显示字体\n    pygame.display.flip() # 跟新游戏界面\n\n    if should_restart():\n        init_game()\n    else:\n        running = False\n\n\ndef check_horizontal_win(matrix_pos):\n    #  横向检查，如果每行的总和为3，则玩家赢，如果是-3，玩家输\n    global game_final_msg\n    for row in matrix_pos:\n        if sum(row) == 3:\n            game_final_msg = WIN_STR\n        elif sum(row) == -3:\n            game_final_msg = LOOSER_STR\n\n\ndef check_vertical_win(matrix_pos):\n    #  纵向检查，如果每列的总和为3，则玩家赢，如果是-3，玩家输\n    global game_final_msg\n    for col in range(MATRIX_LEN):\n        if sum(matrix_pos[:, col]) == 3:\n            game_final_msg = WIN_STR\n        elif sum(matrix_pos[:, col]) == -3:\n            game_final_msg = LOOSER_STR\n\n\ndef check_diagonal_winner(matrix_pos):\n    #  对角线检查，如果向下或向上对角线的总和为3，则玩家赢，如果是-3，玩家输\n    global game_final_msg\n    top_left_diagonal = matrix_pos[0, 0] + matrix_pos[1, 1] + matrix_pos[2, 2]\n    top_right_diagonal = matrix_pos[0, 2] + matrix_pos[1, 1] + matrix_pos[2, 0]\n    if top_left_diagonal == 3 or top_right_diagonal == 3:\n        game_final_msg = WIN_STR\n    elif top_left_diagonal == -3 or top_right_diagonal == -3:\n        game_final_msg = LOOSER_STR\n\n\ndef check_draw(matrix_pos):\n    # 如果每个棋盘都填满，则平手\n    global game_final_msg\n    if len(game_final_msg) == 0 and np.count_nonzero(matrix_pos == 0) == 0:\n        game_final_msg = DRAW_STR\n\n\ndef check_winner():\n    check_horizontal_win(board_matrix) # 横向检查\n    check_vertical_win(board_matrix) # 纵向检查\n    check_diagonal_winner(board_matrix) # 对角线检查\n    check_draw(board_matrix) # 平手检查\n\n    global game_final_msg\n    if len(game_final_msg) > 0: # 如果game_final_msg里面有值，那么游戏有结果了\n        display_end_game() # 显示游戏最终结果\n\n\ndef time_pause(current_time, elapse):\n    # 暂停elapse毫秒的时间\n    # 如果现在的时间（pygame.time.get_ticks()）小于初始时间（current_time）加间隔的时间（elapse）\n    while pygame.time.get_ticks() < current_time + elapse:\n        pass\n\n\ninit_game()\nrunning = True\nwhile running:\n    draw() # 跟新游戏界面\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: # 用户点击左上角的退出\n            running = False # 设定游戏为终止状态\n        if is_player_turn() and event.type == pygame.MOUSEBUTTONUP: # 在玩家回合，玩家点击游戏界面\n            click_pos = pygame.mouse.get_pos()\n            if in_chessboard_area(click_pos): # 点击位置在棋格里面\n                matrix_pos = to_matrix_pos(click_pos)\n                make_move(matrix_pos) # 玩家下棋\n                draw() # 跟新游戏界面\n                time_pause(pygame.time.get_ticks(), 1000) # 游戏暂停1000毫秒\n                check_winner() # 查看是否有胜利者\n    if not is_player_turn() and running: # 电脑回合，并游戏正在运行\n        ai_make_move() # 电脑下棋\n        draw() # 跟新游戏界面\n        time_pause(pygame.time.get_ticks(), 1000) # 游戏暂停1000毫秒\n        check_winner() # 查看是否有胜利者'},"206c":function(e){e.exports=JSON.parse('[{"videoId":"1","name":"打地鼠1.0版","channel":"【python游戏编程教程】","coverUrl":"/images/打地鼠1.0版.png","videoUrl":"//player.bilibili.com/player.html?aid=202736051&bvid=BV1Ra411c7Z1&cid=252178411&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"2","name":"打地鼠2.0版","channel":"【python游戏编程教程】","coverUrl":"/images/打地鼠2.0版.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=330263567&bvid=BV1mA411j7Tp&cid=257985726&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"3","name":"变量","channel":"【0基础小白python入门】","coverUrl":"/images/变量.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=287999386&bvid=BV1Af4y1i7gk&cid=260974699&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"4","name":"条件语句（基础）","channel":"【0基础小白python入门】","coverUrl":"/images/条件语句（基础）.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=800603290&bvid=BV1yy4y1v7ZB&cid=263927603&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"5","name":"小恐龙1.0版","channel":"【python游戏编程教程】","coverUrl":"/images/小恐龙1.0.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=670843657&bvid=BV1Xa4y1J7qd&cid=271048249&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"6","name":"条件语句（复杂）","channel":"【0基础小白python入门】","coverUrl":"/images/条件语句（复杂）.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=500579803&bvid=BV1DK411374Y&cid=265586689&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"7","name":"AirPods 2开箱测评","channel":"【日常分享】","coverUrl":"/images/AirPods 2开箱测评.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=755403205&bvid=BV1jr4y1c7US&cid=259562651&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"8","name":"复合数据类型","channel":"【0基础小白python入门】","coverUrl":"/images/复合数据类型.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=755352236&bvid=BV1Xr4y1F7g6&cid=258514145&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"9","name":"提高效率必会快捷键","channel":"【日常分享】","coverUrl":"/images/快捷键.png","videoUrl":"//player.bilibili.com/player.html?aid=755292954&bvid=BV1Yr4y1F7Wy&cid=256063900&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"10","name":"博雅小蜜蜂开箱测评","channel":"【日常分享】","coverUrl":"/images/博雅开箱.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=500189781&bvid=BV1pK411G7Ev&cid=254927101&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"11","name":"基础数据类型","channel":"【0基础小白python入门】","coverUrl":"/images/基础数据类型.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=415135377&bvid=BV12V411y7LM&cid=253653371&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"12","name":"程序媛的Mac免费软件推荐","channel":"【日常分享】","coverUrl":"/images/app推荐.png","videoUrl":"//player.bilibili.com/player.html?aid=202669889&bvid=BV1pa411c72Z&cid=251475405&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"13","name":"2020 13寸 MacBook Pro 开箱及设置","channel":"【日常分享】","coverUrl":"/images/mac开箱设置.png","videoUrl":"//player.bilibili.com/player.html?aid=457545540&bvid=BV1G5411L7xV&cid=249932034&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"14","name":"小恐龙2.0版","channel":"【python游戏编程教程】","coverUrl":"/images/小恐龙2.0.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=713551334&bvid=BV1bX4y1M7gf&cid=280924157&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"15","name":"for循环","channel":"【0基础小白python入门】","coverUrl":"/images/for循环.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=373741178&bvid=BV1vo4y1o7Q8&cid=282622313&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"16","name":"while循环","channel":"【0基础小白python入门】","coverUrl":"/images/while循环.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=416299799&bvid=BV1tV411q7nM&cid=286319139&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"17","name":"数据类型转换","channel":"【0基础小白python入门】","coverUrl":"/images/数据类型转换.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=246438008&bvid=BV1Rv411Y7uN&cid=289313834&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"18","name":"各位父老相亲们，给大家拜年啦","channel":"【python游戏编程教程】","coverUrl":"/images/各位父老相亲们，给大家拜年啦.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=844224141&bvid=BV1J54y1Y7K5&cid=295884631&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"19","name":"switch开箱+初始设置","channel":"【日常分享】","coverUrl":"/images/switch开箱+初始设置.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=204332507&bvid=BV1wh411k7sF&cid=299691520&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"20","name":"五子棋（上）","channel":"【python游戏编程教程】","coverUrl":"/images/五子棋（上）.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=459427232&bvid=BV1D5411N7SL&cid=303683613&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"21","name":"五子棋（下）","channel":"【python游戏编程教程】","coverUrl":"/images/五子棋（下）.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=204554657&bvid=BV1Lh411Q7XY&cid=307112225&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"22","name":"git push加速","channel":"【编程窍门分享】","coverUrl":"/images/git push加速.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=417001160&bvid=BV18V411v76u&cid=309154255&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"23","name":"2021 第8代 iPad 开箱","channel":"【日常分享】","coverUrl":"/images/2021 第8代 iPad 开箱.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=374631840&bvid=BV1MZ4y1w7pU&cid=313297677&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"24","name":"函数，参数和返回","channel":"【0基础小白python入门】","coverUrl":"/images/函数，参数和返回.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=672363186&bvid=BV1KU4y1Y7Na&cid=316315143&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"25","name":"lambda( )以及应用(map, filter和reduce)","channel":"【0基础小白python入门】","coverUrl":"/images/lambda( )以及应用(map, filter和reduce).jpeg","videoUrl":"//player.bilibili.com/player.html?aid=844966752&bvid=BV1V54y1b7tk&cid=319473569&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false},{"videoId":"26","name":"单人三子棋1.0","channel":"【python游戏编程教程】","coverUrl":"/images/单人三子棋1.0.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=845403300&bvid=BV1Q54y1j7U7&cid=332752534&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"27","name":"单人三子棋2.0","channel":"【python游戏编程教程】","coverUrl":"/images/单人三子棋2.0.jpeg","videoUrl":"//player.bilibili.com/player.html?aid=588315449&bvid=BV1JB4y1u7Rb&cid=344788990&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":true},{"videoId":"28","name":"列表推导式(list comprehension)","channel":"【0基础小白python入门】","coverUrl":"/images/列表推导式(list comprehension).jpeg","videoUrl":"//player.bilibili.com/player.html?aid=546070871&bvid=BV11q4y157Lz&cid=353872851&page=1&as_wide=1&high_quality=1&danmaku=0","haveCode":false}]')},"24e9":function(e,n,a){},"27fd":function(e,n,a){e.exports=a.p+"img/youtube.9a308e91.png"},3156:function(e,n,a){"use strict";a.r(n),n["default"]='from dataclasses import dataclass\n\nimport numpy as np\nimport pygame\n\n\n@dataclass\nclass Position:\n    x: int\n    y: int\n\n\nLEN_SCREEN = 1000\n\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nBG_COLOR = (100, 180, 250)\n\nGAME_OVER = "Win the Game"\nGAME_OVER_POS = (300, 200)\nSTART_OVER = "Do you want to start over? Y/N"\nSTART_OVER_POS = (250, 300)\n\nDIS_TO_BOUNDARY = 50\nLEN_CHESS_SQUARE = 50\nCHESS_PIECE_RADIUS = 20\n\npygame.init()\n\nWHITE_BOARDER_IMG = pygame.image.load("white_boarder.png")\nWHITE_BOARDER_IMG = pygame.transform.scale(WHITE_BOARDER_IMG, (LEN_CHESS_SQUARE, LEN_CHESS_SQUARE))\n\nscreen = pygame.display.set_mode((LEN_SCREEN, LEN_SCREEN))\nfont = pygame.font.Font(\'YSHaoShenTi-2.ttf\', 32)\n\n\ndef init_game():\n    global BOARD_LEN, board_matrix, is_black\n    is_black = True\n    BOARD_LEN = 15\n    board_matrix = np.zeros((BOARD_LEN, BOARD_LEN), dtype=int)\n\n\ndef to_matrix_pos(pos):\n    x = (pos[0] - DIS_TO_BOUNDARY) // LEN_CHESS_SQUARE\n    y = (pos[1] - DIS_TO_BOUNDARY) // LEN_CHESS_SQUARE\n    return Position(x, y)\n\n\ndef make_move(pos, is_black):\n    if board_matrix[pos.y][pos.x] == 0:\n        board_matrix[pos.y][pos.x] = 1 if is_black else -1\n        return True\n    return False\n\n\ndef rolling_window_sum(values, window):\n    result = []\n    for i in range(len(values)-window+1):\n        sliced_window = values[i:i+window]\n        result.append(sum(sliced_window))\n    return result\n\n\ndef check_horizontal_win(matrix_pos):\n    x = matrix_pos.x\n    row = board_matrix[matrix_pos.y]\n    left_end_start = max(0, x - 4)\n    left_end_end = min(x, BOARD_LEN - 5)\n    for i in range(left_end_start, left_end_end + 1):\n        if abs(sum(row[i:i + 5])) == 5:\n            return True\n    return False\n\n\ndef check_vertical_win(matrix_pos):\n    y = matrix_pos.y\n    col = board_matrix[:, matrix_pos.x]\n    top_end_start = max(0, y - 4)\n    top_end_end = min(y, BOARD_LEN - 5)\n    for i in range(top_end_start, top_end_end + 1):\n        if abs(sum(col[i:i + 5])) == 5:\n            return True\n    return False\n\n\ndef check_diagonal_win(matrix_pos):\n    x, y = matrix_pos.x, matrix_pos.y\n    all_values = []\n    for i in range(-4, 5):\n        if 0 <= x + i < BOARD_LEN and 0 <= y + i < BOARD_LEN:\n            # store all values that need to be checked in a list\n            all_values.append(board_matrix[y+i, x+i])\n    rolling_sum = rolling_window_sum(np.array(all_values), 5)\n    if 5 in rolling_sum:\n        return True\n    all_values = []\n    for i in range(-4, 5):\n        if 0 <= x + i < BOARD_LEN and 0 <= y - i < BOARD_LEN:\n            # store all values that need to be checked in a list\n            all_values.append(board_matrix[y - i, x + i])\n    rolling_sum = rolling_window_sum(np.array(all_values), 5)\n    if 5 in rolling_sum:\n        return True\n\n    return False\n\n\ndef check_winner(is_black, matrix_pos):\n    if check_horizontal_win(matrix_pos) or check_vertical_win(matrix_pos) or check_diagonal_win(matrix_pos):\n        return 1 if is_black else -1\n    return 0\n\n\ndef wait_in_ms(time):\n    t_cur = pygame.time.get_ticks()\n    while pygame.time.get_ticks() - t_cur < time:\n        continue\n\n\ndef display_end_game(winner):\n    draw_chess_piece()\n    game_over = font.render(winner + " " + GAME_OVER, True, BLACK)\n    screen.blit(game_over, GAME_OVER_POS)\n    start_over = font.render(START_OVER, True, BLACK)\n    screen.blit(start_over, START_OVER_POS)\n    pygame.display.update()\n\n\ndef should_restart():\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.KEYUP and event.key == pygame.K_y:\n                return True\n            elif event.type == pygame.KEYUP and event.key == pygame.K_n:\n                return False\n        wait_in_ms(500)\n\n\ndef matrix_pos_to_screen_pos(row, col):\n    return (DIS_TO_BOUNDARY + col * LEN_CHESS_SQUARE + LEN_CHESS_SQUARE / 2,\n            DIS_TO_BOUNDARY + row * LEN_CHESS_SQUARE + LEN_CHESS_SQUARE / 2)\n\n\ndef draw_chess_piece():\n    for row in range(len(board_matrix)):\n        for col in range(len(board_matrix[row])):\n            if board_matrix[row][col] == 1:\n                pygame.draw.circle(screen, BLACK, matrix_pos_to_screen_pos(row, col), CHESS_PIECE_RADIUS)\n            if board_matrix[row][col] == -1:\n                pygame.draw.circle(screen, WHITE, matrix_pos_to_screen_pos(row, col), CHESS_PIECE_RADIUS)\n\ndef draw_checkerboard():\n    for i in range(BOARD_LEN):\n        for j in range(BOARD_LEN):\n            screen_pos = matrix_pos_to_screen_pos(j,i)\n            screen_pos = (screen_pos[0]-LEN_CHESS_SQUARE/2, screen_pos[1]-LEN_CHESS_SQUARE/2)\n            screen.blit(WHITE_BOARDER_IMG,screen_pos)\n\ninit_game()\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.MOUSEBUTTONUP:\n            click_pos = pygame.mouse.get_pos()\n            if DIS_TO_BOUNDARY <= click_pos[0] <= LEN_SCREEN - DIS_TO_BOUNDARY and DIS_TO_BOUNDARY <= click_pos[\n                1] <= LEN_SCREEN - DIS_TO_BOUNDARY:\n                matrix_pos = to_matrix_pos(click_pos)\n                is_black = not is_black if make_move(matrix_pos, is_black) else is_black\n                winner = check_winner(is_black, matrix_pos)\n                if winner != 0:\n                    display_end_game("黑棋" if winner == -1 else "白棋")\n                    # because the color has updated\n                    if should_restart():\n                        init_game()\n                    else:\n                        running = False\n\n    screen.fill(BG_COLOR)\n    draw_checkerboard()\n    draw_chess_piece()\n    pygame.display.update()'},"31bb":function(e,n,a){e.exports=a.p+"img/bilibili.72e41562.png"},"4fc2":function(e,n,a){"use strict";a.r(n),n["default"]='import pygame\nimport random\nimport math\nfrom dataclasses import dataclass\n\n\npygame.init()\n\nbg_image = pygame.image.load("background.jpeg")\nbg_image = pygame.transform.scale(bg_image, (bg_image.get_width() * 3, bg_image.get_height() * 3))\nscreen = pygame.display.set_mode((bg_image.get_width(), bg_image.get_height()))\n\nenemy_image = pygame.image.load("mole_with_backgroud.png")\nenemy_image = pygame.transform.scale(enemy_image, (enemy_image.get_width() // 2, enemy_image.get_height() // 2))\n\nscore_value = 0\nfont = pygame.font.Font(\'freesansbold.ttf\', 32)\n\ntextX = 10\ntextY = 10\n\nenemies = []\n\nNUM_COL = 3\nNUM_ROW = 3\n\nENEMY_LIFE_SPAN = 5 * 1000\n@dataclass\nclass Enemy:\n    x: int\n    y: int\n    life: int = ENEMY_LIFE_SPAN\n\nENEMY_RADIUS = min(enemy_image.get_width(), enemy_image.get_height()) // 2.5\nENEMY_COLOR = (255, 0, 0)\nGENERATE_ENEMY, APPEAR_INTERVAL = pygame.USEREVENT + 1, 2 * 1000\npygame.time.set_timer(GENERATE_ENEMY, APPEAR_INTERVAL)\nAGE_ENEMY, AGE_INTERVAL = pygame.USEREVENT + 2, 1 * 1000\npygame.time.set_timer(AGE_ENEMY, AGE_INTERVAL)\n\npossible_enemy_pos = [(190, 100), (470, 100), (770, 100), (150, 220), (475, 220), (770, 220), (130, 370), (475, 370),\n                      (805, 370)]\n\n\ndef check_exist(pos):\n    for enemy in enemies:\n        if pos == (enemy.x, enemy.y):\n            return True\n    return False\n\n\ndef generate_next_enemy_pos():\n    new_pos = ()\n    while True:\n        grid_index = random.randint(0, NUM_ROW * NUM_COL - 1)\n        new_pos = possible_enemy_pos[grid_index]\n        if not check_exist(new_pos):\n            break\n    return new_pos\n\n\ndef draw_enemies():\n    for enemy in enemies:\n        screen.blit(enemy_image, (enemy.x, enemy.y))\n\n\ndef show_score(x, y):\n    global score_value\n    score = font.render("Score: " + str(score_value), True, (255, 255, 255))\n    screen.blit(score, (x, y))\n\n\ndef check_enemy_collision(clickX, clickY, enemyX, enemyY):\n    enemyX, enemyY = enemyX + ENEMY_RADIUS, enemyY + ENEMY_RADIUS\n    distance = math.sqrt(math.pow(enemyX - clickX, 2) + (math.pow(enemyY - clickY, 2)))\n    return distance < ENEMY_RADIUS\n\n\ndef check_enemies_collision(click_pos, enemies):\n    for enemy in enemies:\n        if check_enemy_collision(click_pos[0], click_pos[1], enemy.x, enemy.y):\n            global score_value\n            score_value += 1\n            enemies.remove(enemy)\n\ndef age_enemies():\n    for enemy in enemies:\n        enemy.life = enemy.life-1000\n\ndef remove_died_enemies():\n    for enemy in enemies:\n        if enemy.life == 0:\n            enemies.remove(enemy)\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.MOUSEBUTTONUP:\n            click_pos = pygame.mouse.get_pos()\n            check_enemies_collision(click_pos, enemies)\n        if event.type == AGE_ENEMY:\n            age_enemies()\n            remove_died_enemies()\n        if event.type == GENERATE_ENEMY:\n            if len(enemies) < NUM_COL * NUM_ROW:\n                new_pos = generate_next_enemy_pos()\n                print(new_pos)\n                enemies.append(Enemy(new_pos[0], new_pos[1]))\n\n    screen.blit(bg_image, (0, 0))\n    draw_enemies()\n    show_score(textX, textY)\n    pygame.display.update()'},"56d7":function(e,n,a){"use strict";a.r(n);a("e260"),a("e6cf"),a("cca6"),a("a79d"),a("0cdd");var i=a("2b0e"),t=a("5f5b");a("ab8b"),a("2dd8");i["default"].use(t["b"]);var r=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{attrs:{id:"app"}},[a("GlobalNavBar"),a("b-container",{attrs:{fluid:""}},[a("b-row",[a("b-col",{attrs:{sm:"2"}},[e._v(" ad ")]),a("b-col",{attrs:{sm:"8"}},[a("router-view",{key:e.$route.fullPath})],1),a("b-col",{attrs:{sm:"2"}},[e._v(" ad ")])],1)],1)],1)},_=[],l=(a("f9e3"),a("498a")),o=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("b-navbar",{attrs:{toggleable:"lg",type:"dark",variant:"dark"}},[a("b-navbar-brand",{attrs:{href:"/"}},[e._v("Stephanie 程序媛")]),a("b-navbar-toggle",{attrs:{target:"nav-collapse"}}),a("b-collapse",{attrs:{id:"nav-collapse","is-nav":""}},[a("b-navbar-nav",[a("b-nav-item",{attrs:{to:{name:"programListView"}}},[e._v("编程教学")]),a("b-nav-item",{attrs:{to:{name:"articleListView"}}},[e._v("文章")]),a("b-nav-item",{attrs:{to:{name:"contactMeView"}}},[e._v("留言")])],1)],1)],1)],1)},s=[],c=a("f9bc");i["default"].use(c["a"]);var m={name:"GlobalNavBar",components:{}},p=m,d=a("2877"),u=Object(d["a"])(p,o,s,!1,null,"75b4ce44",null),g=u.exports;i["default"].use(t["a"]),i["default"].use(l["a"]),i["default"].use(g);var f={name:"App",components:{GlobalNavBar:g},mounted:function(){var e=document.createElement("script");e.setAttribute("src","https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"),e.setAttribute("data-ad-client","ca-pub-6082135060702090"),e.async=!0,document.head.appendChild(e)}},y=f,b=Object(d["a"])(y,r,_,!1,null,null,null),E=b.exports,h=a("8c4f"),v=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("b-tabs",{attrs:{"content-class":"mt-3"}},[a("b-tab",{attrs:{title:"视频",active:""}},[a("b-embed",{attrs:{type:"iframe",aspect:"16by9",src:e.videoUrl,allowfullscreen:""}})],1),e.haveCode?a("b-tab",{attrs:{title:"代码"}},[a("div",{attrs:{id:"app"}},[a("highlight-code",{attrs:{lang:e.language,code:e.code}})],1)]):e._e()],1)],1)},w=[],R=a("700c"),x=a("c964"),S=(a("7abb"),a("8da8"),a("4de4"),a("d81d"),a("b0c0"),a("d3b7"),a("6062"),a("3ca3"),a("ddb0"),a("2909")),O=a("206c"),I=a("0437");function N(e){var n=O.filter((function(n){return n.videoId==e}))[0];if(n.haveCode){var i=a("84ac")("./"+n.name+".txt");return{videoUrl:n.videoUrl,haveCode:!0,language:"python",code:i.default}}return{videoUrl:n.videoUrl,haveCode:!1,language:"",code:""}}function A(){var e=O.map((function(e){return e.channel}));return Object(S["a"])(new Set(e))}function T(){var e=I.map((function(e){return e.channel}));return Object(S["a"])(new Set(e))}i["default"].use(R["a"]),i["default"].use(x["a"]);var U={name:"ProgramDetailView",components:{},props:["id"],data:function(){return N(this.id)}},L=U,k=(a("158b"),Object(d["a"])(L,v,w,!1,null,"62399be3",null)),C=k.exports,Y=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("b-navbar",{attrs:{toggleable:"lg",type:"dark",variant:"info"}},[a("b-navbar-brand",{attrs:{href:"#"}},[e._v("视频搜索")]),a("b-navbar-toggle",{attrs:{target:"nav-collapse"}}),a("b-collapse",{attrs:{id:"nav-collapse","is-nav":""}},[a("b-navbar-nav",[a("b-dropdown",{attrs:{text:"分类"}},[a("b-form-checkbox-group",{attrs:{id:"checkbox-group-channel",options:e.videoTypes,name:"channel"},model:{value:e.selectedChannel,callback:function(n){e.selectedChannel=n},expression:"selectedChannel"}})],1)],1),a("b-navbar-nav",{staticClass:"ml-auto"},[a("b-nav-form",[a("b-form-input",{staticClass:"mr-sm-2",attrs:{size:"sm",placeholder:"Search"},model:{value:e.searchStr,callback:function(n){e.searchStr=n},expression:"searchStr"}}),a("b-button",{staticClass:"my-2 my-sm-0",attrs:{size:"sm"}},[e._v("搜索")])],1)],1)],1)],1),a("ProgramListCards",{attrs:{"search-str":e.searchStr,"selected-channel":e.selectedChannel}})],1)},D=[],B=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("b-card-group",{attrs:{deck:""}},e._l(e.videos,(function(n){return a("b-card",{key:n.id,attrs:{title:n.channel+n.name,"img-src":n.coverUrl,"img-alt":"Image","img-top":""}},[a("b-button",{attrs:{to:{name:"programDetailView",params:{id:n.videoId}},variant:"primary"}},[e._v("详情")])],1)})),1)],1)},M=[],P=(a("caad"),a("2532"),a("919e")),V=a.n(P);i["default"].use(V.a);var G={name:"ProgramListCards",props:["selectedChannel","searchStr"],data:function(){return{videos:O}},watch:{searchStr:function(e){this.videos=O.filter((function(n){return n.name.includes(e)||n.channel.includes(e)}))},selectedChannel:function(e){0==e.length?this.videos=O:this.videos=O.filter((function(n){return e.includes(n.channel)}))}}},j=G,H=(a("dfab"),Object(d["a"])(j,B,M,!1,null,"00376c9f",null)),F=H.exports;i["default"].use(F);var Q={name:"ProgramListView",components:{ProgramListCards:F},data:function(){return{searchStr:"",selectedChannel:[],videoTypes:A()}},methods:{}},W=Q,z=Object(d["a"])(W,Y,D,!1,null,"6687806f",null),K=z.exports,q=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("b-navbar",{attrs:{toggleable:"lg",type:"dark",variant:"info"}},[a("b-navbar-brand",{attrs:{href:"#"}},[e._v("文章搜索")]),a("b-navbar-toggle",{attrs:{target:"nav-collapse"}}),a("b-collapse",{attrs:{id:"nav-collapse","is-nav":""}},[a("b-navbar-nav",[a("b-dropdown",{attrs:{text:"分类"}},[a("b-form-checkbox-group",{attrs:{id:"checkbox-group-channel",options:e.articleTypes,name:"channel"},model:{value:e.selectedChannel,callback:function(n){e.selectedChannel=n},expression:"selectedChannel"}})],1)],1),a("b-navbar-nav",{staticClass:"ml-auto"},[a("b-nav-form",[a("b-form-input",{staticClass:"mr-sm-2",attrs:{size:"sm",placeholder:"Search"},model:{value:e.searchStr,callback:function(n){e.searchStr=n},expression:"searchStr"}}),a("b-button",{staticClass:"my-2 my-sm-0",attrs:{size:"sm"}},[e._v("搜索")])],1)],1)],1)],1),a("ArticleListCards",{attrs:{"search-str":e.searchStr,"selected-channel":e.selectedChannel}})],1)},X=[],Z=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("b-card-group",{attrs:{deck:""}},e._l(e.articles,(function(n){return a("b-card",{key:n.id,attrs:{title:n.channel+n.name,"img-src":n.coverUrl,"img-alt":"Image","img-top":""}},[a("b-button",{attrs:{to:{name:"articleDetailView",params:{id:n.articleId}},variant:"primary"}},[e._v("详情")])],1)})),1)],1)},$=[];i["default"].use(V.a);var J={name:"ArticleListCards",props:["selectedChannel","searchStr"],data:function(){return{articles:I}},watch:{searchStr:function(e){this.articles=I.filter((function(n){return n.name.includes(e)||n.channel.includes(e)}))},selectedChannel:function(e){0==e.length?this.articles=I:this.articles=I.filter((function(n){return e.includes(n.channel)}))}}},ee=J,ne=(a("e670"),Object(d["a"])(ee,Z,$,!1,null,"4914fc94",null)),ae=ne.exports;i["default"].use(ae);var ie={name:"ArticleListView",components:{ArticleListCards:ae},data:function(){return{searchStr:"",selectedChannel:[],articleTypes:T()}},methods:{}},te=ie,re=Object(d["a"])(te,q,X,!1,null,"b9700f4e",null),_e=re.exports,le=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{domProps:{innerHTML:e._s(e.articleHtml)}})},oe=[],se=(a("ac1f"),a("5319"),{name:"ArticleDetailView",props:["id"],created:function(){var e=this,n=a("bc3a").default;n.get("../../articles/article-".concat(this.id,".html")).then((function(n){e.articleHtml=n.data,e.articleHtml=e.articleHtml.replace('class="Post-Title"','style="margin: 5% 0 5% 0;"'),e.articleHtml=e.articleHtml.replace('class="RichText ztext Post-RichText"','style="font-size: large;"')})).catch((function(e){console.error(e)}))},data:function(){return{articleHtml:""}}}),ce=se,me=(a("8f40"),Object(d["a"])(ce,le,oe,!1,null,"3e37bd77",null)),pe=me.exports,de=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("b-jumbotron",{attrs:{header:"联系我"}}),a("b-row",[a("b-col",{attrs:{cols:"8"}},[a("contact-me-form")],1),a("b-col",[a("contact-me-info")],1)],1)],1)},ue=[],ge=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"container"},[a("form",[a("label",[e._v("姓名")]),a("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],attrs:{type:"text",placeholder:"你的名字"},domProps:{value:e.name},on:{keyup:e.updateOutputUrl,input:function(n){n.target.composing||(e.name=n.target.value)}}}),a("label",[e._v("主题")]),a("input",{directives:[{name:"model",rawName:"v-model",value:e.subject,expression:"subject"}],attrs:{type:"text",placeholder:"邮件主题"},domProps:{value:e.subject},on:{keyup:e.updateOutputUrl,input:function(n){n.target.composing||(e.subject=n.target.value)}}}),a("label",[e._v("留言")]),a("textarea",{directives:[{name:"model",rawName:"v-model",value:e.message,expression:"message"}],attrs:{cols:"30",rows:"5",placeholder:"留言"},domProps:{value:e.message},on:{keyup:e.updateOutputUrl,input:function(n){n.target.composing||(e.message=n.target.value)}}}),a("b-button",{attrs:{variant:"primary",href:e.outputUrl}},[e._v("发送")])],1)])},fe=[],ye={name:"ContactMeForm",data:function(){return{name:"",subject:"",message:"",outputUrl:""}},methods:{updateOutputUrl:function(){this.outputUrl="mailto:stephanie.programmer@gmail.com",this.outputUrl=this.outputUrl+"?subject=个人网站from "+this.name+": "+this.subject,this.outputUrl=this.outputUrl+"&body="+this.message}}},be=ye,Ee=(a("ac61"),Object(d["a"])(be,ge,fe,!1,null,"71c642b4",null)),he=Ee.exports,ve=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"markdown-body"},[a("mdFile")],1)},we=[],Re=function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},xe=[function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("section",[a("h1",[e._v("我在其他平台")]),a("p",[e._v("欢迎大家在其他平台关注我")]),a("ul",[a("li",[a("a",{attrs:{href:"https://www.zhihu.com/people/liu-yi-chun-70"}},[e._v("知乎")])]),a("li",[a("a",{attrs:{href:"https://space.bilibili.com/6572191"}},[e._v("哔哩哔哩")])]),a("li",[a("a",{attrs:{href:"https://www.youtube.com/channel/UC5mG06J7zzGxExrD2oBBl-g"}},[e._v("油管")])])])])}],Se={},Oe=Object(d["a"])(Se,Re,xe,!1,null,null,null),Ie=Oe.exports,Ne=(a("2c43"),a("e4cb"),{name:"ContactMeInfo",components:{mdFile:Ie}}),Ae=Ne,Te=Object(d["a"])(Ae,ve,we,!1,null,"32546919",null),Ue=Te.exports,Le={name:"ContactMeView",components:{ContactMeForm:he,ContactMeInfo:Ue}},ke=Le,Ce=Object(d["a"])(ke,de,ue,!1,null,"796d9092",null),Ye=Ce.exports,De=function(){var e=this,n=e.$createElement,i=e._self._c||n;return i("b-row",{staticClass:"view"},[i("b-col",{attrs:{sm:"12",md:"3"}},[i("img",{staticClass:"headshot",attrs:{src:a("85d6")}})]),i("b-col",{staticClass:"txt-section"},[i("h1",{staticClass:"welcom"},[e._v("欢迎来到程序媛的网站，我是Stephanie")]),i("div",{staticClass:"website-info"},[i("p",[e._v(" 这是我的个人网站，我会在这个网站上发布我的视频，代码，文章等等，欢迎大家给我留言。这个网站一共有三部分，"),i("b",[e._v("编程教学（视频）")]),e._v("，"),i("b",[e._v("文章")]),e._v("，以及"),i("b",[e._v("留言")]),e._v("。 ")]),i("p",[e._v("编程教学里面包括我的教学视频，以及对应的代码。")]),i("p",[e._v("文章区里面包括关于我求职，留学经历的文章。")]),i("p",[e._v("最后大家可以通过留言区联系我。")]),i("h3",[e._v("我在其他平台")]),i("ul",[i("img",{staticClass:"icon",attrs:{src:a("b6f7")}}),i("a",{attrs:{href:"https://www.zhihu.com/people/liu-yi-chun-70"}},[e._v("@Stephanie 程序媛")])]),i("ul",[i("img",{staticClass:"icon",attrs:{src:a("31bb")}}),i("a",{attrs:{href:"https://space.bilibili.com/6572191"}},[e._v("@Stephanie_程序媛")])]),i("ul",[i("img",{staticClass:"icon",attrs:{src:a("27fd")}}),i("a",{attrs:{href:"https://www.youtube.com/channel/UC5mG06J7zzGxExrD2oBBl-g"}},[e._v("@Stephanie_程序媛")])])])])],1)},Be=[],Me={name:"HomeView"},Pe=Me,Ve=(a("a0df"),Object(d["a"])(Pe,De,Be,!1,null,"0ed84c51",null)),Ge=Ve.exports;i["default"].use(h["a"]);var je=new h["a"]({routes:[{path:"/",name:"homeView",component:Ge},{path:"/program-list-view/",name:"programListView",component:K},{path:"/program-detail-view/:id",props:!0,name:"programDetailView",component:C},{path:"/article-list-view/",name:"articleListView",component:_e},{path:"/article-detail-view/:id",props:!0,name:"articleDetailView",component:pe},{path:"/contact-me-view/",name:"contactMeView",component:Ye}]});i["default"].config.productionTip=!1,new i["default"]({render:function(e){return e(E)},router:je,components:{App:E}}).$mount("#app")},"706c":function(e,n,a){},7311:function(e,n,a){"use strict";a.r(n),n["default"]='from dataclasses import dataclass\n\nimport pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode((1000, 500))\nscore_value = 0\nfont = pygame.font.Font(\'freesansbold.ttf\', 32)\nSCORE_POS = (10, 10)\n\nGAME_OVER = "GAME OVER"\nGAME_OVER_POS = (400, 200)\nSTART_OVER = "Do you want to start over? Y/N"\nSTART_OVER_POS = (250, 300)\n\n\n@dataclass\nclass Sprite:\n    position: tuple\n    velocity: tuple = (0, 0)\n    acceleration: tuple = (0, 0)\n\n\nPLAYER_RADIUS = 25\nPLAYER_COLOR = (255, 0, 0)\nPLAYER_INITIAL_POS = (300, 475)\nplayer = Sprite(PLAYER_INITIAL_POS)\nPLAYER_JUMP_VELOCITY = (0, -300)\nGRAVITY = (0, 9.81)\n\nenemies = []\nENEMY_COLOR = (0, 0, 225)\nENEMY_WIDTH = 50\nENEMY_HEIGHT = 80\nENEMY_INITIAL_POS = (900, 420)\nENEMY_INITIAL_VELOCITY = (-140, 0)\nENEMY_VELOCITY_INCREMENT = (-10, 0)\n\nGENERATE_ENEMY, APPEAR_INTERVAL = pygame.USEREVENT + 1, 3 * 1000\npygame.time.set_timer(GENERATE_ENEMY, APPEAR_INTERVAL)\n\nINCREASE_ENEMY_VELOCITY, INCREMENT_INTERVAL = pygame.USEREVENT + 2, 1 * 1000\npygame.time.set_timer(INCREASE_ENEMY_VELOCITY, INCREMENT_INTERVAL)\n\n\ndef add_tuple(a, b):\n    x = a[0] + b[0]\n    y = a[1] + b[1]\n    return (x, y)\n\n\ndef subtract_tuple(a, b):\n    x = a[0] - b[0]\n    y = a[1] - b[1]\n    return (x, y)\n\n\ndef times_tuple_constant(t, c):\n    x = t[0] * c\n    y = t[1] * c\n    return (x, y)\n\n\ndef update_player(t_elapse):\n    # update position\n    diff = times_tuple_constant(player.velocity, t_elapse)\n    diff = add_tuple(diff, times_tuple_constant(player.acceleration, t_elapse ** 2 / 2))\n    player.position = add_tuple(player.position, diff)\n\n    # update velocity\n    player.velocity = add_tuple(player.velocity, times_tuple_constant(player.acceleration, t_elapse))\n\n    # update acceleration\n    if player.position[1] < PLAYER_INITIAL_POS[1]:\n        # if the player is jumping\n        player.acceleration = add_tuple(player.acceleration, GRAVITY)\n    if player.position[1] > PLAYER_INITIAL_POS[1]:\n        # if the player is below ground\n        player.position = PLAYER_INITIAL_POS\n        player.acceleration = (0, 0)\n        player.velocity = (0, 0)\n\n\ndef update_enemies(t_elapse):\n    for enemy in enemies:\n        enemy.position = add_tuple(enemy.position, times_tuple_constant(enemy.velocity, t_elapse))\n\n\ndef draw_player():\n    pygame.draw.circle(screen, PLAYER_COLOR, player.position, PLAYER_RADIUS)\n\n\ndef draw_enemies():\n    for enemy in enemies:\n        pygame.draw.rect(screen, ENEMY_COLOR, enemy.position + (ENEMY_WIDTH, ENEMY_HEIGHT))\n\n\ndef is_collide(e, p):\n    if player.position[1] + PLAYER_RADIUS > e.position[1]:\n        if p.position[0] - PLAYER_RADIUS <= e.position[0] <= p.position[0] + PLAYER_RADIUS:\n            return True\n        if p.position[0] - PLAYER_RADIUS <= e.position[0] + ENEMY_WIDTH <= p.position[0] + PLAYER_RADIUS:\n            return True\n    return False\n\n\ndef check_enemies_player_collision():\n    for enemy in enemies:\n        if is_collide(enemy, player):\n            return True\n    return False\n\n\ndef is_player_in_air():\n    return player.position[1] < PLAYER_INITIAL_POS[1]\n\n\ndef remove_jumped_over_enemies():\n    global score_value\n    for enemy in enemies:\n        if player.position[0] - PLAYER_RADIUS > enemy.position[0] + ENEMY_WIDTH and not is_player_in_air():\n            enemies.remove(enemy)\n            score_value += 1\n\n\ndef show_score():\n    global score_value\n    score = font.render("Score: " + str(score_value), True, (255, 255, 255))\n    screen.blit(score, SCORE_POS)\n\n\ndef wait_in_ms(time):\n    t_cur = pygame.time.get_ticks()\n    while pygame.time.get_ticks() - t_cur < time:\n        continue\n\n\ndef should_continue_game():\n    game_over = font.render(GAME_OVER, True, (255, 255, 255))\n    screen.blit(game_over, GAME_OVER_POS)\n    start_over = font.render(START_OVER, True, (255, 255, 255))\n    screen.blit(start_over, START_OVER_POS)\n    pygame.display.update()\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.KEYUP and event.key == pygame.K_y:\n                return True\n            elif event.type == pygame.KEYUP and event.key == pygame.K_n:\n                return False\n        wait_in_ms(500)\n\n\nrunning = True\nt_pre = pygame.time.get_ticks()\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYUP and event.key == pygame.K_SPACE:\n            if not is_player_in_air():\n                player.velocity = add_tuple(player.velocity, PLAYER_JUMP_VELOCITY)\n        if event.type == GENERATE_ENEMY:\n            enemies.append(Sprite(ENEMY_INITIAL_POS, ENEMY_INITIAL_VELOCITY))\n        if event.type == INCREASE_ENEMY_VELOCITY:\n            ENEMY_INITIAL_VELOCITY = add_tuple(ENEMY_INITIAL_VELOCITY, ENEMY_VELOCITY_INCREMENT)\n            for enemy in enemies:\n                enemy.velocity = add_tuple(enemy.velocity, ENEMY_VELOCITY_INCREMENT)\n            print(enemies)\n    remove_jumped_over_enemies()\n\n    screen.fill((0, 0, 0))\n    t_cur = pygame.time.get_ticks()\n    update_enemies((t_cur - t_pre) * 10 ** -3)\n    update_player((t_cur - t_pre) * 10 ** -3)\n    show_score()\n    draw_player()\n    draw_enemies()\n    pygame.display.update()\n    t_pre = t_cur\n    if check_enemies_player_collision():\n        if should_continue_game():\n            enemies.clear()\n            score_value = 0\n            ENEMY_INITIAL_VELOCITY = (-140, 0)\n        else:\n            running = False'},"74e1":function(e,n,a){},"84ac":function(e,n,a){var i={"./五子棋（上）.txt":"a361","./五子棋（下）.txt":"3156","./单人三子棋1.0.txt":"1616","./单人三子棋2.0.txt":"876e","./各位父老相亲们，给大家拜年啦.txt":"9f6a","./小恐龙1.0版.txt":"9701","./小恐龙2.0版.txt":"7311","./打地鼠1.0版.txt":"fca8","./打地鼠2.0版.txt":"4fc2"};function t(e){var n=r(e);return a(n)}function r(e){if(!a.o(i,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return i[e]}t.keys=function(){return Object.keys(i)},t.resolve=r,e.exports=t,t.id="84ac"},"85d6":function(e,n,a){e.exports=a.p+"img/headshot.5bf183ea.jpeg"},"876e":function(e,n,a){"use strict";a.r(n),n["default"]='# 井字游戏 （三连棋）\nimport sys\n\nimport numpy as np\nimport pygame\n\n# 颜色 = (红, 绿, 蓝)\nWHITE = (242, 235, 211)\nBLACK = (75, 102, 99)\nBG_COLOR = (61, 189, 172)\n\n# 加载游戏背景图\nBG_IMG = pygame.image.load("BG_IMG.png")\n\n# 设置游戏窗口\nDIS_TO_BOUNDARY = 100  # 棋盘到游戏窗口的距离\nMATRIX_LEN = 3  # 棋盘是3乘3\nSQUARE_LEN = BG_IMG.get_width() / MATRIX_LEN  # 每个棋格的长度是棋盘长度除以棋格个数\nscreen_len = BG_IMG.get_width() + 2 * DIS_TO_BOUNDARY  # 游戏窗口的大小是棋盘长度+2个棋盘到游戏窗口边缘的距离\n\n# 游戏结果\nWIN_STR = "WINNER!"  # 获胜\nDRAW_STR = "DRAW"  # 平手\nLOOSER_STR = "LOOSER"  # 失败\n\n# 初始游戏\npygame.init()\nscreen = pygame.display.set_mode((screen_len, screen_len))  # 设置游戏界面的大小\n\n# 游戏难度\ngame_difficulty = "hard"\n\n\ndef matrix_pos_to_screen_pos(row, col):\n    # 棋盘位置到游戏窗口位置\n    # 例子：左上角的棋格位置是0，0，游戏窗口位置是100，100\n    return (DIS_TO_BOUNDARY + col * SQUARE_LEN,\n            DIS_TO_BOUNDARY + row * SQUARE_LEN)\n\n\ndef draw_chess_piece():\n    for row in range(len(board_matrix)):\n        for col in range(len(board_matrix[row])):\n            screen_pos = matrix_pos_to_screen_pos(row, col)\n            screen_pos = (screen_pos[0] + SQUARE_LEN / 2,\n                          screen_pos[1] + SQUARE_LEN / 2)\n            if board_matrix[row][col] == 1:  # 是黑棋\n                # pygame.draw.circle(游戏界面, 颜色, 位置, 半径)\n                pygame.draw.circle(screen, BLACK, screen_pos, SQUARE_LEN // 3)\n            if board_matrix[row][col] == -1:  # 是白棋\n                pygame.draw.circle(screen, WHITE, screen_pos, SQUARE_LEN // 3)\n\n\ndef draw():\n    # 画画的顺序很重要，先运行的在最底下\n    screen.fill(BG_COLOR)  # 填充背景色\n    screen_pos = (DIS_TO_BOUNDARY, DIS_TO_BOUNDARY)\n    screen.blit(BG_IMG, screen_pos)  # 将棋盘的图片(BG_IMG)放在screen_pos (100,100)\n    draw_chess_piece()  # 画每个棋子\n    pygame.display.update()  # 更新游戏界面\n\n\ndef init_game():\n    global board_matrix\n    board_matrix = np.zeros((MATRIX_LEN, MATRIX_LEN), dtype=int)  # 初始棋盘为空\n\n\ndef in_chessboard_area(click_pos):\n    # 是否在合适的横向范围\n    is_in_width = DIS_TO_BOUNDARY <= click_pos[0] <= screen_len - \\\n                  DIS_TO_BOUNDARY\n    # 是否在合适的纵向范围\n    is_in_height = DIS_TO_BOUNDARY <= click_pos[1] <= screen_len - \\\n                   DIS_TO_BOUNDARY\n    return is_in_height and is_in_width\n\n\ndef to_matrix_pos(pos):  # 游戏界面位置转化成棋盘位置\n    x = (pos[0] - DIS_TO_BOUNDARY) // SQUARE_LEN\n    y = (pos[1] - DIS_TO_BOUNDARY) // SQUARE_LEN\n    return int(x), int(y)\n\n\ndef make_move(pos):\n    # 若点击位置为空，则放入黑子\n    if board_matrix[pos[1]][pos[0]] == 0:\n        board_matrix[pos[1]][pos[0]] = 1\n\n\ndef is_player_turn(matrix):  # 是否玩家回合\n    result = np.count_nonzero(matrix == 0) % 2 == 1  # 棋盘矩阵里面如果数值为零的个数是奇数\n    return result\n\n\ndef ai_make_move_easy():\n    # 找到第一个棋格为空的地方，放入白棋\n    for row in range(len(board_matrix)):\n        for col in range(len(board_matrix[row])):\n            if board_matrix[row][col] == 0:\n                board_matrix[row][col] = -1\n                return\n\n\ndef make_move_if_two_in_row():\n    # 如果出现两个即将成成串的情况就堵住：横竖\n    for row in range(len(board_matrix)):\n        for col in range(len(board_matrix[row])):\n            if board_matrix[row, col] == 0 and (sum(board_matrix[row, :]) == 2 or sum(board_matrix[:, col]) == 2):\n                board_matrix[row, col] = -1\n                return\n    # 如果出现两个即将成成串的情况就堵住：对角线\n    top_left_diagonal = board_matrix[0, 0] + \\\n                        board_matrix[1, 1] + board_matrix[2, 2]\n    top_right_diagonal = board_matrix[0, 2] + \\\n                         board_matrix[1, 1] + board_matrix[2, 0]\n    if top_left_diagonal == 2:\n        if board_matrix[0, 0] == 0:\n            board_matrix[0, 0] = -1\n            return\n        elif board_matrix[1, 1] == 0:\n            board_matrix[1, 1] = -1\n            return\n        elif board_matrix[2, 2] == 0:\n            board_matrix[2, 2] = -1\n            return\n    elif top_right_diagonal == 2:\n        if board_matrix[0, 2] == 0:\n            board_matrix[0, 2] = -1\n            return\n        elif board_matrix[1, 1] == 0:\n            board_matrix[1, 1] = -1\n            return\n        elif board_matrix[2, 0] == 0:\n            board_matrix[2, 0] = -1\n            return\n\n\ndef ai_make_move_medium():\n    num_chess = np.count_nonzero(board_matrix)\n    make_move_if_two_in_row()\n    if num_chess == np.count_nonzero(board_matrix):\n        # make_move_if_two_in_row 没有下棋\n        ai_make_move_easy()\n\n\ndef get_all_possible_results_score(current_board_matrix):\n    all_possible_result_scores = []\n    # 如果现有棋子的数量小于棋格数，也就是说还有空棋格\n    if np.count_nonzero(current_board_matrix) < (MATRIX_LEN * MATRIX_LEN):\n        for row in range(len(current_board_matrix)):\n            for col in range(len(current_board_matrix)):\n                if current_board_matrix[row, col] == 0:\n                    # 每一个空棋格下棋\n                    new_board = np.copy(current_board_matrix)\n                    new_board[row, col] = 1 if is_player_turn(\n                        new_board) else -1\n                    results = [check_horizontal_win(new_board), check_vertical_win(new_board),\n                               check_diagonal_winner(new_board), check_draw(new_board)]\n                    # 检出是否有赢家\n                    if len([x for x in results if x == "W"]):\n                        # 如果黑子赢，分数是-10，因为是计算机在下棋所以不希望黑子赢。\n                        all_possible_result_scores.append(-10)\n                    elif len([x for x in results if x == "L"]):\n                        # 如果黑子输，分数是10，因为是计算机在下棋所以希望黑子输，白子赢。\n                        all_possible_result_scores.append(10)\n                    elif len([x for x in results if x == "D"]):\n                        # 如果平手，分数是0，因为不关心平手。\n                        all_possible_result_scores.append(0)\n                    else:\n                        # 如果还没有结果，那就继续计算下一步。\n                        all_possible_result_scores.extend(\n                            get_all_possible_results_score(new_board))\n    return all_possible_result_scores\n\n\ndef ai_make_move_hard():\n    # num_chess现有的棋子数\n    num_chess = np.count_nonzero(board_matrix)\n    # 如果有两个即将成三个的情况就下棋\n    make_move_if_two_in_row()\n    # 如果现有的棋子数没有变化，则通过用brute force的方法计算出最优解。\n    if np.count_nonzero(board_matrix) == num_chess:\n        # max_score 是用来记录目前得分最高，也就是当前的最优解\n        # max_score[0]记录下一步棋的位置的，max_score[1]记录如果下一步棋在这里对应的分数\n        max_scores = ((-1, -1), -sys.maxsize - 1)\n        for row in range(len(board_matrix)):\n            for col in range(len(board_matrix)):\n                if board_matrix[row, col] == 0:\n                    # 对每一个空的棋格下棋，并计算其对应的分数\n                    new_board = np.copy(board_matrix)\n                    new_board[row, col] = -1\n                    score = sum(get_all_possible_results_score(new_board))\n                    # 如果分数大于现有最大分数，则更新下棋位置与分数\n                    if score > max_scores[1]:\n                        max_scores = ((row, col), score)\n        # 在分析完每一个空棋格的位置后，根据max_score[0]的位置下棋\n        board_matrix[max_scores[0][0], max_scores[0][1]] = -1\n\n\ndef ai_make_move():\n    if game_difficulty == "easy":\n        ai_make_move_easy()\n    elif game_difficulty == "medium":\n        ai_make_move_medium()\n    else:\n        ai_make_move_hard()\n\n\ndef should_restart():  # 是否从新开始\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.MOUSEBUTTONUP:\n                # 如果点击窗口，就从新开始\n                return True\n            if event.type == pygame.QUIT:\n                # 如果点击左上角退出键，就退出游戏\n                return False\n\n\ndef display_end_game(result):\n    screen.fill(BG_COLOR)  # 填充背景色\n    font = pygame.font.Font(None, 70)  # 设置字体\n\n    # font.render(要显示的信息, 抗锯齿, 颜色)\n    winner_msg = font.render(result, True, BLACK)\n    # 在游戏界面的三分之一高度和三分之一宽度处显示字体\n    screen.blit(winner_msg, (screen_len / 3, screen_len / 3))\n    pygame.display.flip()  # 跟新游戏界面\n\n    if should_restart():\n        init_game()\n    else:\n        global running\n        running = False\n\n\ndef check_horizontal_win(matrix):\n    #  横向检查，如果每行的总和为3，则玩家赢，如果是-3，玩家输\n    for row in matrix:\n        if sum(row) == 3:\n            return WIN_STR\n        elif sum(row) == -3:\n            return LOOSER_STR\n    return ""\n\n\ndef check_vertical_win(matrix):\n    #  纵向检查，如果每列的总和为3，则玩家赢，如果是-3，玩家输\n    for col in range(MATRIX_LEN):\n        if sum(matrix[:, col]) == 3:\n            return WIN_STR\n        elif sum(matrix[:, col]) == -3:\n            return LOOSER_STR\n    return ""\n\n\ndef check_diagonal_winner(matrix):\n    #  对角线检查，如果向下或向上对角线的总和为3，则玩家赢，如果是-3，玩家输\n    top_left_diagonal = matrix[0, 0] + matrix[1, 1] + matrix[2, 2]\n    top_right_diagonal = matrix[0, 2] + matrix[1, 1] + matrix[2, 0]\n    if top_left_diagonal == 3 or top_right_diagonal == 3:\n        return WIN_STR\n    elif top_left_diagonal == -3 or top_right_diagonal == -3:\n        return LOOSER_STR\n    return ""\n\n\ndef check_draw(matrix):\n    # 如果每个棋盘都填满，则平手\n    if np.count_nonzero(matrix == 0) == 0:\n        return DRAW_STR\n    return ""\n\n\ndef check_winner():\n    # [横向检查, 纵向检查, 对角线检查, 平手检查] 这个顺序很重要，决定了display_end_game(results[0])的正确性\n    results = [check_horizontal_win(board_matrix), check_vertical_win(board_matrix),\n               check_diagonal_winner(board_matrix), check_draw(board_matrix)]\n\n    results = [x for x in results if len(x) > 0]\n    if len(results) > 0:  # 如果results里面有值，那么游戏有结果了\n        display_end_game(results[0])  # 显示游戏最终结果\n\n\ndef time_pause(current_time, elapse):\n    # 暂停elapse毫秒的时间\n    # 如果现在的时间（pygame.time.get_ticks()）小于初始时间（current_time）加间隔的时间（elapse）\n    while pygame.time.get_ticks() < current_time + elapse:\n        pass\n\n\ninit_game()\nrunning = True\nwhile running:\n    draw()  # 跟新游戏界面\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:  # 用户点击左上角的退出\n            running = False  # 设定游戏为终止状态\n        if is_player_turn(board_matrix) and event.type == pygame.MOUSEBUTTONUP:  # 在玩家回合，玩家点击游戏界面\n            click_pos = pygame.mouse.get_pos()\n            if in_chessboard_area(click_pos):  # 点击位置在棋格里面\n                matrix_pos = to_matrix_pos(click_pos)\n                make_move(matrix_pos)  # 玩家下棋\n                draw()  # 跟新游戏界面\n                time_pause(pygame.time.get_ticks(), 1000)  # 游戏暂停1000毫秒\n                check_winner()  # 查看是否有胜利者\n    if not is_player_turn(board_matrix) and running:  # 电脑回合，并游戏正在运行\n        ai_make_move()  # 电脑下棋\n        draw()  # 跟新游戏界面\n        time_pause(pygame.time.get_ticks(), 1000)  # 游戏暂停1000毫秒\n        check_winner()  # 查看是否有胜利者'},"8f40":function(e,n,a){"use strict";a("da4a")},9701:function(e,n,a){"use strict";a.r(n),n["default"]="import pygame\n\nfrom dataclasses import dataclass\n\npygame.init()\n\nscreen = pygame.display.set_mode((1000, 500))\n\n@dataclass\nclass Sprite:\n    position: tuple\n    velocity: tuple = (0,0)\n    acceleration: tuple = (0, 0)\n\nPLAYER_RADIUS = 25\nPLAYER_COLOR = (255, 0, 0)\nPLAYER_INITIAL_POS = (300, 475)\nplayer = Sprite(PLAYER_INITIAL_POS)\nPLAYER_JUMP_VELOCITY = (0, -300)\nGRAVITY = (0, 9.81)\n\nenemies = []\nENEMY_COLOR=(0,0,225)\nENEMY_WIDTH = 50\nENEMY_HEIGHT = 80\nENEMY_INITIAL_POS=(900,420)\nENEMY_INITIAL_VELOCITY= (-140,0)\n\nGENERATE_ENEMY, APPEAR_INTERVAL = pygame.USEREVENT+1, 3*1000\npygame.time.set_timer(GENERATE_ENEMY, APPEAR_INTERVAL)\n\n\ndef add_tuple(a,b):\n    x = a[0]+b[0]\n    y = a[1]+b[1]\n    return (x, y)\n\ndef subtract_tuple(a,b):\n    x = a[0]-b[0]\n    y = a[1]-b[1]\n    return (x, y)\n\ndef times_tuple_constant(t,c):\n    x = t[0]*c\n    y = t[1]*c\n    return (x, y)\n\ndef update_player(t_elapse):\n    # update position\n    diff = times_tuple_constant(player.velocity, t_elapse)\n    diff = add_tuple(diff, times_tuple_constant(player.acceleration, t_elapse**2/2))\n    player.position = add_tuple(player.position, diff)\n\n    # update velocity\n    player.velocity = add_tuple(player.velocity, times_tuple_constant(player.acceleration, t_elapse))\n\n    # update acceleration\n    if player.position[1] < PLAYER_INITIAL_POS[1]:\n        # if the player is jumping\n        player.acceleration=add_tuple(player.acceleration, GRAVITY)\n    if player.position[1] > PLAYER_INITIAL_POS[1]:\n        # if the player is below ground\n        player.position = PLAYER_INITIAL_POS\n        player.acceleration=(0,0)\n        player.velocity = (0,0)\n\n\ndef update_enemies(t_elapse):\n    for enemy in enemies:\n        enemy.position = add_tuple(enemy.position, times_tuple_constant(enemy.velocity, t_elapse))\n\n\ndef draw_player():\n    pygame.draw.circle(screen, PLAYER_COLOR, player.position, PLAYER_RADIUS)\n\ndef draw_enemies():\n    for enemy in enemies:\n        pygame.draw.rect(screen, ENEMY_COLOR, enemy.position+(ENEMY_WIDTH, ENEMY_HEIGHT))\n\ndef is_collide(e, p):\n    if player.position[1] + PLAYER_RADIUS > e.position[1]:\n        if p.position[0]-PLAYER_RADIUS <= e.position[0]<=p.position[0]+PLAYER_RADIUS:\n            return True\n        if p.position[0]-PLAYER_RADIUS <= e.position[0]+ENEMY_WIDTH<=p.position[0]+PLAYER_RADIUS:\n            return True\n    return False\n\n\n\ndef check_enemies_player_collision():\n    for enemy in enemies:\n        if is_collide(enemy, player):\n            return True\n    return False\n\n\nrunning = True\nt_pre = pygame.time.get_ticks()\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYUP and event.key == pygame.K_SPACE:\n            player.velocity = add_tuple(player.velocity, PLAYER_JUMP_VELOCITY)\n        if event.type == GENERATE_ENEMY:\n            enemies.append(Sprite(ENEMY_INITIAL_POS, ENEMY_INITIAL_VELOCITY))\n\n\n    screen.fill((0,0,0))\n    t_cur = pygame.time.get_ticks()\n    update_enemies((t_cur-t_pre)*10**-3)\n    update_player((t_cur-t_pre)*10**-3)\n    if check_enemies_player_collision():\n        running=False\n    draw_player()\n    draw_enemies()\n    pygame.display.update()\n    t_pre=t_cur"},"9e86":function(e,n,a){},"9f6a":function(e,n,a){"use strict";a.r(n),n["default"]='import pygame\n\nBULL_BG_COLOR = (0.8471 * 255, 0.22157 * 255, 0.1765 * 255)\nLION_BG_COLOR = (0.8471 * 255, 0.1020 * 255, 0.2039 * 255)\nSCREEN_SIZE = (int(800 * 1.5), int(450 * 1.5))\n\npygame.init()\nscreen = pygame.display.set_mode(SCREEN_SIZE)\nfont = pygame.font.Font(\'YSHaoShenTi-2.ttf\', 100)\nFONT_COLOR = (255, 207, 64)\n\nGREETING = u"新春快乐"\nGREETING_POS = (SCREEN_SIZE[0] / 2.7, SCREEN_SIZE[1] * 3 / 4)\n\nshould_lion_appear = False\nlion_image = pygame.image.load("lion_middle.jpg")\nlion_image = pygame.transform.scale(lion_image, (lion_image.get_width() // 3, lion_image.get_height() // 3))\nLION_POS = ((SCREEN_SIZE[0] - lion_image.get_width()) / 2, (SCREEN_SIZE[1] - lion_image.get_height()) / 8)\n\nbull_l_image = pygame.image.load("bull_left.jpeg")\nbull_l_image = pygame.transform.scale(bull_l_image, (bull_l_image.get_width() // 5, bull_l_image.get_height() // 5))\nbull_l_pos = (0, (SCREEN_SIZE[1] - bull_l_image.get_height()) / 2)\n\nbull_r_image = pygame.image.load("bull_right.jpg")\nbull_r_image = pygame.transform.scale(bull_r_image, (bull_r_image.get_width() // 5, bull_r_image.get_height() // 5))\nbull_r_pos = (SCREEN_SIZE[0] - bull_l_image.get_width(), (SCREEN_SIZE[1] - bull_l_image.get_height()) / 2)\n\n# pbg: partial background\npbg_bull_l_image = pygame.image.load("pbg_bull_left.png")\npbg_bull_l_image = pygame.transform.scale(pbg_bull_l_image,\n                                          (pbg_bull_l_image.get_width() // 5, pbg_bull_l_image.get_height() // 5))\n\npbg_bull_r_image = pygame.image.load("pbg_bull_right.png")\npbg_bull_r_image = pygame.transform.scale(pbg_bull_r_image,\n                                          (pbg_bull_r_image.get_width() // 5, pbg_bull_r_image.get_height() // 5))\n# offset to the left and right side\npbg_bull_offset = 30\npbg_bull_rotate_angle = 0\npbg_bull_rotate_direction = "l"\npbg_bull_l_image_rot = pbg_bull_l_image\npbg_bull_r_image_rot = pbg_bull_r_image\n\nrotation_offset = 20\n\n\ndef draw():\n    if should_lion_appear:\n        screen.fill(LION_BG_COLOR)\n        screen.blit(lion_image, LION_POS)  # draw lion in the middle\n        greeting = font.render(GREETING, True, FONT_COLOR)\n        screen.blit(greeting, GREETING_POS)\n        screen.blit(pbg_bull_l_image_rot, pbg_bull_l_image_rot.get_rect(\n            center=pbg_bull_l_image.get_rect(topleft=(pbg_bull_offset,\n                                             (SCREEN_SIZE[1] - bull_l_image.get_height()) / 2)).center).topleft)\n        screen.blit(pbg_bull_r_image_rot, pbg_bull_r_image_rot.get_rect(\n            center=pbg_bull_r_image.get_rect(topleft=(\n            SCREEN_SIZE[0] - bull_r_image.get_width() - pbg_bull_offset,\n            (SCREEN_SIZE[1] - bull_r_image.get_height()) / 2)).center).topleft)\n    else:\n        screen.fill(BULL_BG_COLOR)\n        screen.blit(bull_l_image, bull_l_pos)\n        screen.blit(bull_r_image, bull_r_pos)\n\n\ndef update(t_elaps):\n    global bull_r_pos, bull_l_pos, should_lion_appear\n    bull_r_pos = (bull_r_pos[0] - t_elaps / 10, bull_r_pos[1])\n    bull_l_pos = (bull_l_pos[0] + t_elaps / 10, bull_l_pos[1])\n    if bull_r_pos[0] - bull_l_pos[0] < bull_l_image.get_width():\n        should_lion_appear = True\n    if should_lion_appear:\n        global pbg_bull_l_image, pbg_bull_r_image, pbg_bull_rotate_angle, pbg_bull_rotate_direction\n        global pbg_bull_l_image_rot, pbg_bull_r_image_rot\n        if pbg_bull_rotate_angle > rotation_offset and pbg_bull_rotate_direction == "r":\n            pbg_bull_rotate_angle -= t_elaps/15\n            pbg_bull_rotate_direction = "l"\n        elif pbg_bull_rotate_angle < -1*rotation_offset and pbg_bull_rotate_direction == "l":\n            pbg_bull_rotate_angle += t_elaps/15\n            pbg_bull_rotate_direction = "r"\n        else:\n            if pbg_bull_rotate_direction == "r":\n                pbg_bull_rotate_angle += t_elaps/15\n            else:\n                pbg_bull_rotate_angle -= t_elaps/15\n        pbg_bull_l_image_rot = pygame.transform.rotate(pbg_bull_l_image, pbg_bull_rotate_angle)\n        pbg_bull_r_image_rot = pygame.transform.rotate(pbg_bull_r_image, -1 * pbg_bull_rotate_angle)\n\n\nrunning = True\nt_pre = pygame.time.get_ticks()\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    t_cur = pygame.time.get_ticks()\n    update(t_cur - t_pre)\n    t_pre = t_cur\n    draw()\n    pygame.display.update()'},a0df:function(e,n,a){"use strict";a("ac20")},a361:function(e,n,a){"use strict";a.r(n),n["default"]='from dataclasses import dataclass\n\nimport numpy as np\nimport pygame\n\n\n@dataclass\nclass Position:\n    x: int\n    y: int\n\n\nLEN_SCREEN = 1000\n\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nBG_COLOR = (100, 180, 250)\n\nGAME_OVER = "Win the Game"\nGAME_OVER_POS = (300, 200)\nSTART_OVER = "Do you want to start over? Y/N"\nSTART_OVER_POS = (250, 300)\n\nDIS_TO_BOUNDARY = 50\nLEN_CHESS_SQUARE = 50\nCHESS_PIECE_RADIUS = 20\n\npygame.init()\n\nWHITE_BOARDER_IMG = pygame.image.load("white_boarder.png")\nWHITE_BOARDER_IMG = pygame.transform.scale(WHITE_BOARDER_IMG, (LEN_CHESS_SQUARE, LEN_CHESS_SQUARE))\n\nscreen = pygame.display.set_mode((LEN_SCREEN, LEN_SCREEN))\nfont = pygame.font.Font(\'YSHaoShenTi-2.ttf\', 32)\n\n\ndef init_game():\n    global BOARD_LEN, board_matrix, is_black\n    is_black = True\n    BOARD_LEN = 15\n    board_matrix = np.zeros((BOARD_LEN, BOARD_LEN), dtype=int)\n\n\ndef to_matrix_pos(pos):\n    x = (pos[0] - DIS_TO_BOUNDARY) // LEN_CHESS_SQUARE\n    y = (pos[1] - DIS_TO_BOUNDARY) // LEN_CHESS_SQUARE\n    return Position(x, y)\n\n\ndef make_move(pos, is_black):\n    if board_matrix[pos.y][pos.x] == 0:\n        board_matrix[pos.y][pos.x] = 1 if is_black else -1\n        return True\n    return False\n\n\ndef rolling_window_sum(values, window):\n    result = []\n    for i in range(len(values)-window+1):\n        sliced_window = values[i:i+window]\n        result.append(sum(sliced_window))\n    return result\n\n\ndef check_horizontal_win(matrix_pos):\n    x = matrix_pos.x\n    row = board_matrix[matrix_pos.y]\n    left_end_start = max(0, x - 4)\n    left_end_end = min(x, BOARD_LEN - 5)\n    for i in range(left_end_start, left_end_end + 1):\n        if abs(sum(row[i:i + 5])) == 5:\n            return True\n    return False\n\n\ndef check_vertical_win(matrix_pos):\n    y = matrix_pos.y\n    col = board_matrix[:, matrix_pos.x]\n    top_end_start = max(0, y - 4)\n    top_end_end = min(y, BOARD_LEN - 5)\n    for i in range(top_end_start, top_end_end + 1):\n        if abs(sum(col[i:i + 5])) == 5:\n            return True\n    return False\n\n\ndef check_diagonal_win(matrix_pos):\n    x, y = matrix_pos.x, matrix_pos.y\n    all_values = []\n    for i in range(-4, 5):\n        if 0 <= x + i < BOARD_LEN and 0 <= y + i < BOARD_LEN:\n            # store all values that need to be checked in a list\n            all_values.append(board_matrix[y+i, x+i])\n    rolling_sum = rolling_window_sum(np.array(all_values), 5)\n    if 5 in rolling_sum:\n        return True\n    all_values = []\n    for i in range(-4, 5):\n        if 0 <= x + i < BOARD_LEN and 0 <= y - i < BOARD_LEN:\n            # store all values that need to be checked in a list\n            all_values.append(board_matrix[y - i, x + i])\n    rolling_sum = rolling_window_sum(np.array(all_values), 5)\n    if 5 in rolling_sum:\n        return True\n\n    return False\n\n\ndef check_winner(is_black, matrix_pos):\n    if check_horizontal_win(matrix_pos) or check_vertical_win(matrix_pos) or check_diagonal_win(matrix_pos):\n        return 1 if is_black else -1\n    return 0\n\n\ndef wait_in_ms(time):\n    t_cur = pygame.time.get_ticks()\n    while pygame.time.get_ticks() - t_cur < time:\n        continue\n\n\ndef display_end_game(winner):\n    draw_chess_piece()\n    game_over = font.render(winner + " " + GAME_OVER, True, BLACK)\n    screen.blit(game_over, GAME_OVER_POS)\n    start_over = font.render(START_OVER, True, BLACK)\n    screen.blit(start_over, START_OVER_POS)\n    pygame.display.update()\n\n\ndef should_restart():\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.KEYUP and event.key == pygame.K_y:\n                return True\n            elif event.type == pygame.KEYUP and event.key == pygame.K_n:\n                return False\n        wait_in_ms(500)\n\n\ndef matrix_pos_to_screen_pos(row, col):\n    return (DIS_TO_BOUNDARY + col * LEN_CHESS_SQUARE + LEN_CHESS_SQUARE / 2,\n            DIS_TO_BOUNDARY + row * LEN_CHESS_SQUARE + LEN_CHESS_SQUARE / 2)\n\n\ndef draw_chess_piece():\n    for row in range(len(board_matrix)):\n        for col in range(len(board_matrix[row])):\n            if board_matrix[row][col] == 1:\n                pygame.draw.circle(screen, BLACK, matrix_pos_to_screen_pos(row, col), CHESS_PIECE_RADIUS)\n            if board_matrix[row][col] == -1:\n                pygame.draw.circle(screen, WHITE, matrix_pos_to_screen_pos(row, col), CHESS_PIECE_RADIUS)\n\ndef draw_checkerboard():\n    for i in range(BOARD_LEN):\n        for j in range(BOARD_LEN):\n            screen_pos = matrix_pos_to_screen_pos(j,i)\n            screen_pos = (screen_pos[0]-LEN_CHESS_SQUARE/2, screen_pos[1]-LEN_CHESS_SQUARE/2)\n            screen.blit(WHITE_BOARDER_IMG,screen_pos)\n\ninit_game()\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.MOUSEBUTTONUP:\n            click_pos = pygame.mouse.get_pos()\n            if DIS_TO_BOUNDARY <= click_pos[0] <= LEN_SCREEN - DIS_TO_BOUNDARY and DIS_TO_BOUNDARY <= click_pos[\n                1] <= LEN_SCREEN - DIS_TO_BOUNDARY:\n                matrix_pos = to_matrix_pos(click_pos)\n                is_black = not is_black if make_move(matrix_pos, is_black) else is_black\n                winner = check_winner(is_black, matrix_pos)\n                if winner != 0:\n                    display_end_game("黑棋" if winner == -1 else "白棋")\n                    # because the color has updated\n                    if should_restart():\n                        init_game()\n                    else:\n                        running = False\n\n    screen.fill(BG_COLOR)\n    draw_checkerboard()\n    draw_chess_piece()\n    pygame.display.update()'},ac20:function(e,n,a){},ac61:function(e,n,a){"use strict";a("74e1")},b6f7:function(e,n,a){e.exports=a.p+"img/zhihu.ad5d3844.png"},da4a:function(e,n,a){},dfab:function(e,n,a){"use strict";a("9e86")},e670:function(e,n,a){"use strict";a("24e9")},fca8:function(e,n,a){"use strict";a.r(n),n["default"]="import pygame\nimport random\nimport math\n\npygame.init()\n\nscreen = pygame.display.set_mode((1000, 800))\n\nscore_value = 0\nfont = pygame.font.Font('freesansbold.ttf', 32)\n\ntextX = 10\ntextY = 10\n\nenemies = []\n\nNUM_COL = 2\nNUM_ROW = 2\n\nENEMY_RADIUS = 150\nENEMY_COLOR = (255, 0, 0)\n\n\ndef get_pos_by_grid_ind(row, col):\n    return (200 + row * 400, 200 + col * 400)\n\n\ndef generate_next_enemy_pos():\n    grid_index = random.randint(0, 3)\n    row = math.floor(grid_index / NUM_COL)\n    col = grid_index % NUM_COL\n    return get_pos_by_grid_ind(row, col)\n\n\ndef draw_enemies():\n    for enemy in enemies:\n        pygame.draw.circle(screen, ENEMY_COLOR,\n                           (enemy[0], enemy[1]), ENEMY_RADIUS)\n\n\ndef show_score(x, y):\n    global score_value\n    score = font.render(\"Score: \" + str(score_value), True, (255, 255, 255))\n    screen.blit(score, (x, y))\n\n\ndef check_enemy_collision(clickX, clickY, enemyX, enemyY):\n    distance = math.sqrt(math.pow(enemyX - clickX, 2) +\n                         (math.pow(enemyY - clickY, 2)))\n    return distance < ENEMY_RADIUS\n\n\ndef check_enemies_collision(click_pos, enemies):\n    for enemy in enemies:\n        if check_enemy_collision(click_pos[0], click_pos[1], enemy[0], enemy[1]):\n            global score_value\n            score_value += 1\n            enemies.remove(enemy)\n\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.MOUSEBUTTONUP:\n            click_pos = pygame.mouse.get_pos()\n            check_enemies_collision(click_pos, enemies)\n\n    if pygame.time.get_ticks() % 3000 < 10:\n        enemies.append(generate_next_enemy_pos())\n\n    screen.fill((0, 0, 0))\n    draw_enemies()\n    show_score(textX, textY)\n    pygame.display.update()\n"}});
//# sourceMappingURL=app.5b67d334.js.map