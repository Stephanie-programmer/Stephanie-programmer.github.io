# 井字游戏 （三连棋）
import numpy as np
import pygame

# 颜色 = (红, 绿, 蓝)
WHITE = (242, 235, 211)
BLACK = (75, 102, 99)
BG_COLOR = (61, 189, 172)

# 加载游戏背景图
BG_IMG = pygame.image.load("BG_IMG.png")

# 设置游戏窗口
DIS_TO_BOUNDARY = 100 # 棋盘到游戏窗口的距离
MATRIX_LEN = 3 # 棋盘是3乘3
SQUARE_LEN = BG_IMG.get_width() / MATRIX_LEN # 每个棋格的长度是棋盘长度除以棋格个数
screen_len = BG_IMG.get_width() + 2 * DIS_TO_BOUNDARY # 游戏窗口的大小是棋盘长度+2个棋盘到游戏窗口边缘的距离

# 游戏结果
WIN_STR = "WINNER!" # 获胜
DRAW_STR = "DRAW" # 平手
LOOSER_STR = "LOOSER" # 失败
game_final_msg = "" # 最终显示的结果，是以上三种之一

# 初始游戏
pygame.init()
screen = pygame.display.set_mode((screen_len, screen_len)) # 设置游戏界面的大小


def matrix_pos_to_screen_pos(row, col):
    # 棋盘位置到游戏窗口位置
    # 例子：左上角的棋格位置是0，0，游戏窗口位置是100，100
    return (DIS_TO_BOUNDARY + col * SQUARE_LEN,
            DIS_TO_BOUNDARY + row * SQUARE_LEN)


def draw_chess_piece():
    for row in range(len(board_matrix)):
        for col in range(len(board_matrix[row])):
            screen_pos = matrix_pos_to_screen_pos(row, col)
            screen_pos = (screen_pos[0] + SQUARE_LEN / 2, screen_pos[1] + SQUARE_LEN / 2)
            if board_matrix[row][col] == 1: # 是黑棋
                # pygame.draw.circle(游戏界面, 颜色, 位置, 半径)
                pygame.draw.circle(screen, BLACK, screen_pos, SQUARE_LEN // 3)
            if board_matrix[row][col] == -1: # 是白棋
                pygame.draw.circle(screen, WHITE, screen_pos, SQUARE_LEN // 3)


def draw():
    # 画画的顺序很重要，先运行的在最底下
    screen.fill(BG_COLOR) # 填充背景色
    screen_pos = (DIS_TO_BOUNDARY, DIS_TO_BOUNDARY)
    screen.blit(BG_IMG, screen_pos) # 将棋盘的图片(BG_IMG)放在screen_pos (100,100)
    draw_chess_piece() # 画每个棋子
    pygame.display.update() # 更新游戏界面


def init_game():
    global board_matrix, game_final_msg
    game_final_msg = "" # 初始最终现实的信息为空
    board_matrix = np.zeros((MATRIX_LEN, MATRIX_LEN), dtype=int) # 初始棋盘为空


def in_chessboard_area(click_pos):
    is_in_width  = DIS_TO_BOUNDARY <= click_pos[0] <= screen_len - DIS_TO_BOUNDARY # 是否在合适的横向范围
    is_in_height = DIS_TO_BOUNDARY <= click_pos[1] <= screen_len - DIS_TO_BOUNDARY # 是否在合适的纵向范围
    return is_in_height and is_in_width


def to_matrix_pos(pos): # 游戏界面位置转化成棋盘位置
    x = (pos[0] - DIS_TO_BOUNDARY) // SQUARE_LEN
    y = (pos[1] - DIS_TO_BOUNDARY) // SQUARE_LEN
    return int(x), int(y)


def make_move(pos):
    # 若点击位置为空，则放入黑子
    if board_matrix[pos[1]][pos[0]] == 0:
        board_matrix[pos[1]][pos[0]] = 1


def is_player_turn(): # 是否玩家回合
    result = np.count_nonzero(board_matrix == 0) % 2 == 1 # 棋盘矩阵里面如果数值为零的个数是奇数
    return result


def ai_make_move():
    # 找到第一个棋格为空的地方，放入白棋
    for row in range(len(board_matrix)):
        for col in range(len(board_matrix[row])):
            if board_matrix[row][col] == 0:
                board_matrix[row][col] = -1
                return


def should_restart(): # 是否从新开始
    while True:
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONUP:
                # 如果点击窗口，就从新开始
                return True
            if event.type == pygame.QUIT:
                # 如果点击左上角退出键，就退出游戏
                return False


def display_end_game():
    screen.fill(BG_COLOR) # 填充背景色
    font = pygame.font.Font(None, 70) # 设置字体

    global game_final_msg, running
    winner_msg = font.render(game_final_msg, True, BLACK) # font.render(要显示的信息, 抗锯齿, 颜色)
    screen.blit(winner_msg, (screen_len / 3, screen_len / 3)) # 在游戏界面的三分之一高度和三分之一宽度处显示字体
    pygame.display.flip() # 跟新游戏界面

    if should_restart():
        init_game()
    else:
        running = False


def check_horizontal_win(matrix_pos):
    #  横向检查，如果每行的总和为3，则玩家赢，如果是-3，玩家输
    global game_final_msg
    for row in matrix_pos:
        if sum(row) == 3:
            game_final_msg = WIN_STR
        elif sum(row) == -3:
            game_final_msg = LOOSER_STR


def check_vertical_win(matrix_pos):
    #  纵向检查，如果每列的总和为3，则玩家赢，如果是-3，玩家输
    global game_final_msg
    for col in range(MATRIX_LEN):
        if sum(matrix_pos[:, col]) == 3:
            game_final_msg = WIN_STR
        elif sum(matrix_pos[:, col]) == -3:
            game_final_msg = LOOSER_STR


def check_diagonal_winner(matrix_pos):
    #  对角线检查，如果向下或向上对角线的总和为3，则玩家赢，如果是-3，玩家输
    global game_final_msg
    top_left_diagonal = matrix_pos[0, 0] + matrix_pos[1, 1] + matrix_pos[2, 2]
    top_right_diagonal = matrix_pos[0, 2] + matrix_pos[1, 1] + matrix_pos[2, 0]
    if top_left_diagonal == 3 or top_right_diagonal == 3:
        game_final_msg = WIN_STR
    elif top_left_diagonal == -3 or top_right_diagonal == -3:
        game_final_msg = LOOSER_STR


def check_draw(matrix_pos):
    # 如果每个棋盘都填满，则平手
    global game_final_msg
    if len(game_final_msg) == 0 and np.count_nonzero(matrix_pos == 0) == 0:
        game_final_msg = DRAW_STR


def check_winner():
    check_horizontal_win(board_matrix) # 横向检查
    check_vertical_win(board_matrix) # 纵向检查
    check_diagonal_winner(board_matrix) # 对角线检查
    check_draw(board_matrix) # 平手检查

    global game_final_msg
    if len(game_final_msg) > 0: # 如果game_final_msg里面有值，那么游戏有结果了
        display_end_game() # 显示游戏最终结果


def time_pause(current_time, elapse):
    # 暂停elapse毫秒的时间
    # 如果现在的时间（pygame.time.get_ticks()）小于初始时间（current_time）加间隔的时间（elapse）
    while pygame.time.get_ticks() < current_time + elapse:
        pass


init_game()
running = True
while running:
    draw() # 跟新游戏界面
    for event in pygame.event.get():
        if event.type == pygame.QUIT: # 用户点击左上角的退出
            running = False # 设定游戏为终止状态
        if is_player_turn() and event.type == pygame.MOUSEBUTTONUP: # 在玩家回合，玩家点击游戏界面
            click_pos = pygame.mouse.get_pos()
            if in_chessboard_area(click_pos): # 点击位置在棋格里面
                matrix_pos = to_matrix_pos(click_pos)
                make_move(matrix_pos) # 玩家下棋
                draw() # 跟新游戏界面
                time_pause(pygame.time.get_ticks(), 1000) # 游戏暂停1000毫秒
                check_winner() # 查看是否有胜利者
    if not is_player_turn() and running: # 电脑回合，并游戏正在运行
        ai_make_move() # 电脑下棋
        draw() # 跟新游戏界面
        time_pause(pygame.time.get_ticks(), 1000) # 游戏暂停1000毫秒
        check_winner() # 查看是否有胜利者